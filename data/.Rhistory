# plot
ggplot(df2, aes(x= variable, y= value)) + geom_line(aes(group = ID)) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2), se =F, size = 2, col ="red" )
library(reshape2)
set.seed(123456)
# Change function, quadratic
# Yit = B0ij + B1ij*time + B2ij*time^2
chn <- function(int, slp, slp2, time){
score<-int + slp * time+ slp2 * time^2
return(score)
}
# Set N, random intercept, time and ID
N<-100
start<-rnorm(N,100,15) # Random intercept
time<- matrix(1:15,ncol = 15, nrow = 100,byrow = T) # Time, balanced panel data
ID<-1:N # ID variable
# Random intercept, linear slope: exp(intercept/25)/75, quadratic slope: exp(intercept/25)/250
score3<-matrix(NA,ncol = ncol(time), nrow = N)
for(x in ID){
score3[x,]<-chn(start[x],exp(start[x]/25)/75,exp(start[x]/25)/250,time[x,])
}
#Create dataframe
df<- data.frame(ID,score3)
df2<- melt(df,id = 'ID')
df2$variable<-as.vector(time)
# plot
ggplot(df2, aes(x= variable, y= value)) + geom_line(aes(group = ID)) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2), se =F, size = 2, col ="red" )
df2$value2<-df2$value + rnorm(N*ncol(time),0,2)
mod1<-lme(value2 ~ variable + I(variable^2),
random= list(ID = ~1),
data=df2,method="ML",na.action=na.exclude)
summary(mod1)
# Random slopes
mod2<-update(mod1,.~.,random= list(ID = ~variable + I(variable^2)))
summary(mod2)
library(nlme)
mod1<-lme(value2 ~ variable + I(variable^2),
random= list(ID = ~1),
data=df2,method="ML",na.action=na.exclude)
summary(mod1)
# Random slopes
mod2<-update(mod1,.~.,random= list(ID = ~variable + I(variable^2)))
summary(mod2)
m1 <- lmer(value2 ~ variable + I(variable ^2) + (variable + I(variable^2)|ID), data = df)
m1 <- lmer(value2 ~ variable + I(variable ^2) + (variable + I(variable^2)|ID), data = df2)
m1
m1 <- lmer(value2 ~ variable + I(variable ^2) + (variable + I(variable^2)|ID), data = df2, REML + FALSE)
m1 <- lmer(value2 ~ variable + I(variable ^2) + (variable + I(variable^2)|ID), data = df2, REML = FALSE)
m1
VarCorr(m1)
summary(m1)
set.seed(12345)
# New dataset to separate random and fixed
N<-100              # Number of respondents
int<-100            # Fixed effect intercept
U0<-rnorm(N,0,15)   # Random effect intercept
slp_lin<-1          # Fixed effect linear slope
slp_qua<-.25        # Fixed effect quadratic slope
ID<- 1:100          # ID numbers
U1<-exp(U0/25)/7.5  # Random effect linear slope
U2<-exp(U0/25)/25   # Random effect quadratic slope
times<-15           # Max age
err <- matrix(rnorm(N*times,0,2),ncol = times, nrow = N) # Residual term
age <- 1:15         # Ages
# Create matrix of 'math' scores using model
math<-matrix(NA,ncol = times, nrow = N)
for(i in ID){
for(j in age){
math[i,j] <- (int + U0[i]) +
(slp_lin + U1[i])*age[j] +
(slp_qua + U2[i])*(age[j]^2) +
err[i,j]
}}
# Melt dataframe and plot scores
e.long<-melt(math)
names(e.long) <- c("ID","age","math")
Stab_rnk2<-lme(math ~ age + I(age^2),
random= list(ID = ~age + I(age^2)),
data=e.long,method="ML",na.action=na.exclude)
summary(Stab_rnk2)
m1 <- lmer(math ~ age + I(age^2) + (age + I(age^2)|ID), data = e.long)
m1
m1 <- lmer(math ~ age + I(age^2) + (age + I(age^2)|ID), data = e.long, REML + FALSE)
m1 <- lmer(math ~ age + I(age^2) + (age + I(age^2)|ID), data = e.long, REML = FALSE)
m1
plot(m1)
library(brms)
m2 <- brm(math ~ age + I(age^2) + (age + I(age^2)|ID), data = e.long, cores = 4)
m2
plot(m2)
get_prior(math ~ age + I(age^2) + (age + I(age^2)|ID), data = e.long)
hatvalues
library(lmerTest)
install.packages('lmerTest')
library(lmerTest)
m0 <- lmer(Reaction ~ Days + (1|Subject), data = sleepstudy)
hatvalues(m0)
class(m0)
hatvalues.merMod
lme4:::hatvalues.merMod()
lme4:::hatvalues.merMod
lmerTest::hat
lmerTest::hatvalues
class(m0) <- 'boop'
class(m0)
hatvalues(m0)
library(lme4)
#' start of data creation
mydat <-
structure(list(ID = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29,
1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 2, 3, 4, 5, 6, 7,
8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
24, 25, 26, 27, 28, 29, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
29, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 2, 3, 4, 5,
6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
23, 24, 25, 26, 27, 28, 29), sex = c(1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ROI = structure(c(4L,
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L,
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c("calf",
"DSCAT", "KM", "neck", "SSCAT", "VAT"), class = "factor"),
value = c(0.674,
0.561, 0.543, 0.563, 0.697, 0.608, 0.56, 0.448, 0.626, 0.515,
0.568, 0.528, 0.587, 0.532, 0.547, 0.514, 0.587, 0.572, 0.559,
0.569, 0.462, 0.531, 0.477, 0.582, 0.583, 0.569, 0.563, 0.576,
0.84, 0.638, 0.69, 0.707, 0.704, 0.627, 0.769, 0.637, 0.515,
0.669, 0.699, 0.626, 0.59, 0.639, 0.501, 0.632, 0.624, 0.641,
0.669, 0.656, 0.556, 0.569, 0.633, 0.608, 0.616, 0.664, 0.666,
0.669, 0.545, 0.514, 0.45, 0.585, 0.547, 0.572, 0.577, 0.458,
0.47, 0.537, 0.532, 0.455, 0.62, 0.501, 0.506, 0.44, 0.499, 0.577,
0.457, 0.481, 0.522, 0.516, 0.513, 0.559, 0.571, 0.515, 0.575,
0.521, 0.44, 0.637, 0.521, 0.634, 0.552, 0.581, 0.55, 0.553,
0.522, 0.634, 0.631, 0.512, 0.603, 0.593, 0.58, 0.442, 0.53,
0.463, 0.587, 0.538, 0.48, 0.557, 0.482, 0.53, 0.592, 0.445,
0.526, 0.45, 0.551, 0.51, 0.678, 0.64, 0.599, 0.589, 0.627, 0.621,
0.601, 0.526, 0.619, 0.599, 0.668, 0.615, 0.621, 0.561, 0.532,
0.56, 0.578, 0.686, 0.57, 0.457, 0.563, 0.61, 0.513, 0.638, 0.594,
0.777, 0.562, 0.663, 0.538, 0.471, 0.518, 0.47, 0.535, 0.644,
0.605, 0.474, 0.468, 0.563, 0.539, 0.47, 0.538, 0.453, 0.494,
0.576, 0.418, 0.609, 0.528, 0.453, 0.569, 0.484, 0.486, 0.558,
0.621, 0.465, 0.691, 0.398, 0.539, 0.574), Alter = c(45, 47,
51, 44, 35, 26, 60, 44, 42, 50, 42, 51, 57, 23, 26, 29, 29, 50,
45, 61, 61, 58, 32, 27, 49, 45, 64, 28, 45, 47, 51, 44, 35, 26,
60, 44, 50, 42, 51, 57, 23, 26, 29, 29, 50, 45, 61, 61, 58, 32,
27, 49, 27, 45, 64, 28, 45, 47, 51, 44, 35, 26, 60, 44, 42, 50,
42, 51, 57, 23, 26, 29, 29, 50, 45, 61, 61, 58, 32, 27, 49, 27,
45, 64, 28, 45, 47, 51, 44, 35, 26, 60, 44, 42, 50, 42, 51, 57,
23, 26, 29, 29, 50, 45, 61, 61, 58, 32, 27, 49, 27, 45, 64, 28,
45, 47, 51, 44, 35, 26, 60, 44, 42, 50, 42, 51, 57, 23, 26, 29,
29, 50, 45, 61, 61, 58, 32, 27, 49, 27, 45, 64, 28, 45, 47, 51,
44, 35, 26, 60, 44, 42, 50, 42, 51, 57, 23, 26, 29, 29, 50, 45,
61, 61, 58, 32, 27, 49, 27, 45, 64, 28),
BMI = c(29.7506923675537,
28.8, 28.8385677337646, 41.48, 27.7186069488525, 29.54, 38.06,
35.8453826904297, 35.57, 31.77, 31.75, 32.78, 30.5336246490479,
29.1074104309082, 36.4690246582031, 31.7769088745117, 31.5393238067627,
31.5596752166748, 27.593786239624, 30.8192825317383, 27.0799140930176,
31.481481552124, 29.0328979492188, 24.52, 29.4029197692871, 35.6112785339355,
28.2401905059814, 28.8979587554932, 29.7506923675537, 28.8, 28.8385677337646,
41.48, 27.7186069488525, 29.54, 38.06, 35.8453826904297, 31.77,
31.75, 32.78, 30.5336246490479, 29.1074104309082, 36.4690246582031,
31.7769088745117, 31.5393238067627, 31.5596752166748, 27.593786239624,
30.8192825317383, 27.0799140930176, 31.481481552124, 29.0328979492188,
24.52, 29.4029197692871, 23.0956573486328, 35.6112785339355,
28.2401905059814, 28.8979587554932, 29.7506923675537, 28.8, 28.8385677337646,
41.48, 27.7186069488525, 29.54, 38.06, 35.8453826904297, 35.57,
31.77, 31.75, 32.78, 30.5336246490479, 29.1074104309082, 36.4690246582031,
31.7769088745117, 31.5393238067627, 31.5596752166748, 27.593786239624,
30.8192825317383, 27.0799140930176, 31.481481552124, 29.0328979492188,
24.52, 29.4029197692871, 23.0956573486328, 35.6112785339355,
28.2401905059814, 28.8979587554932, 29.7506923675537, 28.8, 28.8385677337646,
41.48, 27.7186069488525, 29.54, 38.06, 35.8453826904297, 35.57,
31.77, 31.75, 32.78, 30.5336246490479, 29.1074104309082, 36.4690246582031,
31.7769088745117, 31.5393238067627, 31.5596752166748, 27.593786239624,
30.8192825317383, 27.0799140930176, 31.481481552124, 29.0328979492188,
24.52, 29.4029197692871, 23.0956573486328, 35.6112785339355,
28.2401905059814, 28.8979587554932, 29.7506923675537, 28.8, 28.8385677337646,
41.48, 27.7186069488525, 29.54, 38.06, 35.8453826904297, 35.57,
31.77, 31.75, 32.78, 30.5336246490479, 29.1074104309082, 36.4690246582031,
31.7769088745117, 31.5393238067627, 31.5596752166748, 27.593786239624,
30.8192825317383, 27.0799140930176, 31.481481552124, 29.0328979492188,
24.52, 29.4029197692871, 23.0956573486328, 35.6112785339355,
28.2401905059814, 28.8979587554932, 29.7506923675537, 28.8, 28.8385677337646,
41.48, 27.7186069488525, 29.54, 38.06, 35.8453826904297, 35.57,
31.77, 31.75, 32.78, 30.5336246490479, 29.1074104309082, 36.4690246582031,
31.7769088745117, 31.5393238067627, 31.5596752166748, 27.593786239624,
30.8192825317383, 27.0799140930176, 31.481481552124, 29.0328979492188,
24.52, 29.4029197692871, 23.0956573486328, 35.6112785339355,
28.2401905059814, 28.8979587554932)), .Names = c("ID", "sex",
"ROI", "value", "Alter", "BMI"), row.names = c(NA, -172L), class = c("tbl_df","tbl", "data.frame"))
mod <- lmer(value~Alter+ROI+BMI+(1|ID),data=mydat,REML=F)
mod
library(lmerTest)
mod <- lmer(value~Alter+ROI+BMI+(1|ID),data=mydat,REML=F)
summary(mod)
sessionInfo()
getwd()
getwd() + '/001/'
getwd() + '001/'
paste0(getwd(), '/001')
[1 3 8 10; 1 4 7 10; 1 5 6 10; 2 4 7 9; 2 5 6 9; 3 5 6 8]
wd <- paste0(getwd(), '/001')
filenames <- list.files(path = wd, pattern = '*.csv$', recursive = TRUE, full.names= TRUE)
filenames
library(data.table)
library(ggplot2)
window_size <- 0.1
slider <- function(x, y, window_size = 0.1) {
out <- rep(NA, length(y))
upper <- x + (window_size/2)
lower <- x - (window_size/2)
for (nn in seq(1, length(y))) {
out[nn] <- mean(y[x <= upper[nn] & x >= lower[nn]], na.rm = TRUE)
}
out
}
wd <- paste0(getwd(), '/001')
filenames <- list.files(path = wd, pattern = '*.csv$', recursive = TRUE, full.names= TRUE)
dat <- lapply(filenames, read.csv, header = TRUE)
dat <- rbindlist(dat)
dat <- dat[real_prep_time > 0]
dat <- dat[first_image != second_image]
dat[, 'type' := ifelse(
(first_image == 2 & second_image == 4) |
(first_image == 4 & second_image == 2) |
(first_image == 7 & second_image == 9) |
(first_image == 9 & second_image == 7), 'same_hand',
ifelse(
(first_image == 2 & second_image == 8) |
(first_image == 8 & second_image == 2) |
(abs(first_image - second_image) == 3), 'homologous', 'not')
)]
dat[, 'original_digit' := ifelse(first_image ==2 | first_image == 9, 'ring', 'pointer')]
dat[, 'same_hand' := type == 'same_hand']
dat[, 'slide_correct' := slider(real_prep_time, correct, window_size), by = c('type', 'original_digit')]
ggplot(dat, aes(x = real_prep_time,y = slide_correct, colour = type)) +
geom_line(size = 1.2) +
geom_point(aes(y = ifelse(correct, 1.1, -0.1)), pch = '|', size = 4) +
labs(x = 'Preparation Time', y = 'Prop(Correct)') +
scale_x_continuous(breaks = seq(0, 0.5, 0.1), minor_breaks = seq(0, 0.5, 0.05)) +
scale_y_continuous(breaks = seq(0, 1, 0.2)) + facet_wrap(~original_digit)
library(data.table)
library(ggplot2)
window_size <- 0.1
slider <- function(x, y, window_size = 0.1) {
out <- rep(NA, length(y))
upper <- x + (window_size/2)
lower <- x - (window_size/2)
for (nn in seq(1, length(y))) {
out[nn] <- mean(y[x <= upper[nn] & x >= lower[nn]], na.rm = TRUE)
}
out
}
wd <- paste0(getwd(), '/001')
filenames <- list.files(path = wd, pattern = '*.csv$', recursive = TRUE, full.names= TRUE)
dat <- lapply(filenames, read.csv, header = TRUE)
dat <- rbindlist(dat)
dat <- dat[real_prep_time > 0]
dat <- dat[first_image != second_image]
dat[, 'type' := ifelse(
(first_image == 2 & second_image == 4) |
(first_image == 4 & second_image == 2) |
(first_image == 7 & second_image == 9) |
(first_image == 9 & second_image == 7), 'same_hand',
ifelse(
(first_image == 2 & second_image == 9) |
(first_image == 9 & second_image == 2) |
(abs(first_image - second_image) == 3), 'homologous', 'not')
)]
dat[, 'original_digit' := ifelse(first_image ==2 | first_image == 9, 'ring', 'pointer')]
dat[, 'same_hand' := type == 'same_hand']
dat[, 'slide_correct' := slider(real_prep_time, correct, window_size), by = c('type', 'original_digit')]
ggplot(dat, aes(x = real_prep_time,y = slide_correct, colour = type)) +
geom_line(size = 1.2) +
geom_point(aes(y = ifelse(correct, 1.1, -0.1)), pch = '|', size = 4) +
labs(x = 'Preparation Time', y = 'Prop(Correct)') +
scale_x_continuous(breaks = seq(0, 0.5, 0.1), minor_breaks = seq(0, 0.5, 0.05)) +
scale_y_continuous(breaks = seq(0, 1, 0.2)) + facet_wrap(~original_digit)
library(data.table)
library(ggplot2)
window_size <- 0.1
slider <- function(x, y, window_size = 0.1) {
out <- rep(NA, length(y))
upper <- x + (window_size/2)
lower <- x - (window_size/2)
for (nn in seq(1, length(y))) {
out[nn] <- mean(y[x <= upper[nn] & x >= lower[nn]], na.rm = TRUE)
}
out
}
wd <- paste0(getwd(), '/001')
filenames <- list.files(path = wd, pattern = '*.csv$', recursive = TRUE, full.names= TRUE)
dat <- lapply(filenames, fread, header = TRUE)
dat <- rbindlist(dat)
dat <- dat[real_prep_time > 0]
head(dat)
dat <- dat[first_image != second_image]
dat[, 'type' := ifelse(
(first_image == 2 & second_image == 4) |
(first_image == 4 & second_image == 2) |
(first_image == 7 & second_image == 9) |
(first_image == 9 & second_image == 7), 'same_hand',
ifelse(
(first_image == 2 & second_image == 9) |
(first_image == 9 & second_image == 2) |
(abs(first_image - second_image) == 3), 'homologous', 'not')
)]
dat[, 'original_digit' := ifelse(first_image ==2 | first_image == 9, 'ring', 'pointer')]
dat[, 'original_digit' := ifelse(first_image ==2 | first_image == 9, 'ring', 'pointer')]
dat[, 'same_hand' := type == 'same_hand']
dat[, 'slide_correct' := slider(real_prep_time, correct, window_size), by = c('type', 'original_digit')]
ggplot(dat, aes(x = real_prep_time,y = slide_correct, colour = type)) +
geom_line(size = 1.2) +
geom_point(aes(y = ifelse(correct, 1.1, -0.1)), pch = '|', size = 4) +
labs(x = 'Preparation Time', y = 'Prop(Correct)') +
scale_x_continuous(breaks = seq(0, 0.5, 0.1), minor_breaks = seq(0, 0.5, 0.05)) +
scale_y_continuous(breaks = seq(0, 1, 0.2)) + facet_wrap(~original_digit)
dat[, 'original_digit' := ifelse(first_image ==2 | first_image == 9, 'ring', 'pointer')]
dat[, 'same_hand' := type == 'same_hand']
dat[, 'slide_correct' := slider(real_prep_time, correct, window_size), by = c('type', 'original_digit')]
ggplot(dat, aes(x = real_prep_time,y = slide_correct, colour = type)) +
geom_line(size = 1.2) +
geom_point(aes(y = ifelse(correct, 1.1, -0.1)), pch = '|', size = 4) +
labs(x = 'Preparation Time', y = 'Prop(Correct)') +
scale_x_continuous(breaks = seq(0, 0.5, 0.1), minor_breaks = seq(0, 0.5, 0.05), limits = c(0, .5)) +
scale_y_continuous(breaks = seq(0, 1, 0.2)) + facet_wrap(~original_digit)
window_size <- 0.05
dat[, 'slide_correct' := slider(real_prep_time, correct, window_size), by = c('type', 'original_digit')]
ggplot(dat, aes(x = real_prep_time,y = slide_correct, colour = type)) +
geom_line(size = 1.2) +
geom_point(aes(y = ifelse(correct, 1.1, -0.1)), pch = '|', size = 4) +
labs(x = 'Preparation Time', y = 'Prop(Correct)') +
scale_x_continuous(breaks = seq(0, 0.5, 0.1),
minor_breaks = seq(0, 0.5, 0.05), limits = c(0, .5)) +
scale_y_continuous(breaks = seq(0, 1, 0.2)) + facet_wrap(~original_digit)
remake::make('clean')
?make
wd <- getwd()
filenames <- list.files(path = wd, pattern = '*.csv$', recursive = TRUE, full.names= TRUE)
filenames
filenames <- list.files(path = wd, pattern = '*.csv$', recursive = TRUE, full.names= TRUE)
filenames
filenames <- filenames[!grepl('000')]
filenames <- filenames[!grepl(filenames, '000')]
filenames
filenames <- list.files(path = wd, pattern = '*.csv$', recursive = TRUE, full.names= TRUE)
filenames <- filenames[!grepl(filenames, pattern = '000')]
filenames
dat <- lapply(filenames, fread, header = TRUE)
dat <- rbindlist(dat)
dat
mod
5 %% 0
5 %% 1
dat[, 'hand1' := first_image % 5]
dat[, 'hand1' := first_image %% 5]
dat
dat[, 'hand1' := first_image %% 10]
dat
dat[, 'hand1' := ifelse(first_image > 5, 'right', 'left')]
dat
dat[, 'hand1' := ifelse(first_image > 5, 'right', 'left')]
dt
dat
dat <- dat[!is.nan(first_press)]
dat
dat <- lapply(filenames, fread, header = TRUE)
dat <- rbindlist(dat)
dat <- dat[real_prep_time > 0]
dat <- dat[first_image != second_image]
dat <- dat[!is.nan(first_press)]
dat[, 'hand1' := ifelse(first_image > 5, 'right', 'left')]
dat
dat[, 'hand2' := ifelse(first_image > 5, 'right', 'left')]
dat
dat[, 'hand2' := ifelse(second_image > 5, 'right', 'left')]
dat
10 - c(6, 7, 8, 9, 10)
10 - c(6, 7, 8, 9, 10) - 5
ref
rev
rev(c(6,7,8,9,10))
rev(abs(c(6,7,8,9,10)-9))
6:10 - 9
1:5 % 5
1:5 %% 5
6:10 %% 5
fings <- c('pinky', 'ring', 'middle', 'index', 'thumb')
rev(fings)
fings <- c('pinky', 'ring', 'middle', 'index', 'thumb')
fingers <- data.frame(index = 1:10, fingers = c(fings, rev(fings)))
fingers
dat[, 'finger1' := fingers[fingers$index == first_image]]
dat[, 'finger1' := fingers[fingers$index == dat$first_image]]
fingers[, 1]
fingers[1, ]
fingers[1, 'fingers']
dat[, 'finger1' := fingers[fingers$index == dat$first_image,2]]
dat
dat[, 'finger1' := fingers[fingers$index == first_image,2]]
dat
dat$finger1
fings <- c('pinky', 'ring', 'middle', 'index', 'thumb')
fingers <- data.frame(first_image = 1:10, fingers = c(fings, rev(fings)))
merge(dat, fingers, by = 'first_image')
merge(dat, fingers, by = 'first_image')[1:20]
merge(dat, fingers, by = 'first_image', sort = FALSE)
names(fingers)
names_fingers <- c('second_image', 'finger2')
dat <- lapply(filenames, fread, header = TRUE)
dat <- rbindlist(dat)
dat <- dat[real_prep_time > 0]
dat <- dat[first_image != second_image]
dat <- dat[!is.nan(first_press)]
dat[, 'hand1' := ifelse(first_image > 5, 'right', 'left')]
dat[, 'hand2' := ifelse(second_image > 5, 'right', 'left')]
# can't think
fings <- c('pinky', 'ring', 'middle', 'index', 'thumb')
fingers <- data.frame(first_image = 1:10, finger1 = c(fings, rev(fings)))
dat <- merge(dat, fingers, by = 'first_image')
names_fingers <- c('second_image', 'finger2')
dat <- merge(dat, fingers, by = 'second_image')
dat <- lapply(filenames, fread, header = TRUE)
dat <- rbindlist(dat)
dat <- dat[real_prep_time > 0]
dat <- dat[first_image != second_image]
dat <- dat[!is.nan(first_press)]
dat[, 'hand1' := ifelse(first_image > 5, 'right', 'left')]
dat[, 'hand2' := ifelse(second_image > 5, 'right', 'left')]
# can't think
fings <- c('pinky', 'ring', 'middle', 'index', 'thumb')
fingers <- data.frame(first_image = 1:10, finger1 = c(fings, rev(fings)))
dat <- merge(dat, fingers, by = 'first_image', sort = FALSE)
dat
names(fingers) <- c('second_image', 'finger2')
fingers
dat <- merge(dat, fingers, by = 'second_image')
dat
dat <- lapply(filenames, fread, header = TRUE)
dat <- rbindlist(dat)
dat <- dat[real_prep_time > 0]
dat <- dat[first_image != second_image]
dat <- dat[!is.nan(first_press)]
dat[, 'hand1' := ifelse(first_image > 5, 'right', 'left')]
dat[, 'hand2' := ifelse(second_image > 5, 'right', 'left')]
# can't think
fings <- c('pinky', 'ring', 'middle', 'index', 'thumb')
fingers <- data.frame(first_image = 1:10, finger1 = c(fings, rev(fings)))
dat <- merge(dat, fingers, by = 'first_image', sort = FALSE)
names(fingers) <- c('second_image', 'finger2')
dat <- merge(dat, fingers, by = 'second_image', sort = FALSE)
dat
dat[, 'label' := ifelse(hand1 == hand2, 'same_hand',
ifelse(finger1 == finger2, 'homologous', 'heterologous'))]
dat
dat[, 'slide_correct' := slider(real_prep_time, correct, window_size), by = c('label')]
ggplot(dat, aes(x = real_prep_time,y = slide_correct, colour = label)) +
geom_line(size = 1.2) +
geom_point(aes(y = ifelse(correct, 1.1, -0.1)), pch = '|', size = 4) +
labs(x = 'Preparation Time', y = 'Prop(Correct)') +
scale_x_continuous(breaks = seq(0, 0.5, 0.1),
minor_breaks = seq(0, 0.5, 0.05), limits = c(0, .5)) +
scale_y_continuous(breaks = seq(0, 1, 0.2))
window_size <- .1
ggplot(dat, aes(x = real_prep_time,y = slide_correct, colour = label)) +
geom_line(size = 1.2) +
geom_point(aes(y = ifelse(correct, 1.1, -0.1)), pch = '|', size = 4) +
labs(x = 'Preparation Time', y = 'Prop(Correct)') +
scale_x_continuous(breaks = seq(0, 0.5, 0.1),
minor_breaks = seq(0, 0.5, 0.05), limits = c(0, .5)) +
scale_y_continuous(breaks = seq(0, 1, 0.2))
dat[, 'slide_correct' := slider(real_prep_time, correct, window_size), by = c('label')]
ggplot(dat, aes(x = real_prep_time,y = slide_correct, colour = label)) +
geom_line(size = 1.2) +
geom_point(aes(y = ifelse(correct, 1.1, -0.1)), pch = '|', size = 4) +
labs(x = 'Preparation Time', y = 'Prop(Correct)') +
scale_x_continuous(breaks = seq(0, 0.5, 0.1),
minor_breaks = seq(0, 0.5, 0.05), limits = c(0, .5)) +
scale_y_continuous(breaks = seq(0, 1, 0.2))
rnorm(1000, 0.25, 0.1)
hist(rnorm(1000, 0.25, 0.1))
hist(rnorm(1000, 0.15, 0.1) + rexp(1000, 1/.1))
hist(rnorm(1000, 0.15, 0.1) + rexp(1000, 1/.1), breaks = 30)
hist(rnorm(1000, 0.15, 0.1) + rexp(1000, 1/.5), breaks = 30)
hist(rnorm(1000, 0.15, 0.1) + rexp(1000, 1/.2), breaks = 30)
hist(rnorm(1000, 0.1, 0.1) + rexp(1000, 1/.15), breaks = 30)
hist(rnorm(1000, 0.1, 0.1) + rexp(1000, 1/.15), breaks = 30)
hist(rnorm(1000, 0.1, 0.1) + rexp(1000, 1/.15), breaks = 30)
library(truncnorm)
install.packages('truncnorm')
library(truncnorm)
hist(rtruncnorm(1000, 0, Inf, 0.1, 0.1) + rexp(1000, 1/.15), breaks = 30)
