data_homologous <- data.frame(real_prep_time = seq(0, 0.75, 0.001),
label = 'homologous')
fitted_hom <- fitted(m1, newdata = data_homologous, re_formula = NA)
data_homologous <- cbind(data_homologous, fitted_hom[,,4])
plot(data_homologous$Estimate)
lines(data_heterologous$Estimate)
ggplot(data_heterologous, aes(x = real_prep_time, y = Estimate)) +
geom_ribbon(aes(ymin = `2.5%ile`, ymax = `97.5%ile`,
colour = 'homologous choice (from heterologous switch)'),
alpha = 0.4) +
geom_line(aes(y = Estimate,
colour = 'homologous choice (from heterologous switch)'),
size = 1)
ggplot(data_heterologous, aes(x = real_prep_time, y = Estimate)) +
geom_ribbon(aes(ymin = `2.5%ile`, ymax = `97.5%ile`,
fill = 'homologous choice (from heterologous switch)'),
alpha = 0.4) +
geom_line(aes(y = Estimate,
colour = 'homologous choice (from heterologous switch)'),
size = 1)
ggplot(data_heterologous, aes(x = real_prep_time, y = Estimate)) +
geom_ribbon(aes(ymin = `2.5%ile`, ymax = `97.5%ile`,
fill = 'homologous choice (from heterologous switch)'),
alpha = 0.4) +
geom_line(aes(y = Estimate,
colour = 'homologous choice (from heterologous switch)'),
size = 1) +
geom_ribbon(data = data_homologous, aes(ymin = `2.5%ile`, ymax = `97.5%ile`,
fill = 'heterologous choice (from homologous switch)'),
alpha = 0.4) +
geom_line(data = data_homologous, aes(y = Estimate,
colour = 'heterologous choice (from homologous switch)'),
size = 1) +
ylim(c(0, 1))
ggplot(data_heterologous, aes(x = real_prep_time, y = Estimate)) +
geom_ribbon(aes(ymin = `2.5%ile`, ymax = `97.5%ile`,
fill = 'homologous choice (from heterologous switch)'),
alpha = 0.4) +
geom_line(aes(y = Estimate,
colour = 'homologous choice (from heterologous switch)'),
size = 1) +
geom_ribbon(data = data_homologous, aes(ymin = `2.5%ile`, ymax = `97.5%ile`,
fill = 'heterologous choice (from homologous switch)'),
alpha = 0.4) +
geom_line(data = data_homologous, aes(y = Estimate,
colour = 'heterologous choice (from homologous switch)'),
size = 1) +
ylim(c(0, 1)) +
geom_line(data = dat[label == 'homologous'], size = 1,
aes(x = real_prep_time, y = slide_null_new_hand_group,
colour = 'heterologous choice (from homologous switch)'))
ggplot(data_heterologous, aes(x = real_prep_time, y = Estimate)) +
geom_ribbon(aes(ymin = `2.5%ile`, ymax = `97.5%ile`,
fill = 'homologous choice (from heterologous switch)'),
alpha = 0.4) +
geom_line(aes(y = Estimate,
colour = 'homologous choice (from heterologous switch)'),
size = 1) +
geom_ribbon(data = data_homologous, aes(ymin = `2.5%ile`, ymax = `97.5%ile`,
fill = 'heterologous choice (from homologous switch)'),
alpha = 0.4) +
geom_line(data = data_homologous, aes(y = Estimate,
colour = 'heterologous choice (from homologous switch)'),
size = 1) +
ylim(c(0, 1)) +
geom_line(data = dat[label == 'homologous'], size = 1,
aes(x = real_prep_time, y = slide_null_new_hand_group,
colour = 'heterologous choice (from homologous switch)')) +
geom_line(data = dat[label == 'heterologous'], size = 1,
aes(x = real_prep_time, y = slide_null_new_hand_group,
colour = 'homologous choice (from heterologous switch)')) +
labs(x = 'Preparation Time (s)',
y = 'Proportion Choice')
data_dd <- data.frame(real_prep_time = seq(0, 0.75, 0.001),
label = 'heterologous')
fitted_dd <- fitted(m1, newdata = data_heterologous, re_formula = NA)
data_dd <- cbind(data_heterologous, fitted_het[,,1])
ggplot(data_dd, aes(x = real_prep_time, y = Estimate)) +
geom_ribbon(aes(ymin = `2.5%ile`, ymax = `97.5%ile`), alpha = 0.4) +
geom_line()
str(fitted(dd))
str(data_dd)
str(fitted_dd)
data_dd <- data.frame(real_prep_time = seq(0, 0.75, 0.001),
label = 'heterologous')
fitted_dd <- fitted(m1, newdata = data_heterologous, re_formula = NA)
data_dd <- cbind(data_heterologous, fitted_het[,,1])
head(data_dd)
plot(data_dd$Estimate)
data_dd <- data.frame(real_prep_time = seq(0, 0.75, 0.001),
label = 'heterologous')
fitted_dd <- fitted(m1, newdata = data_heterologous, re_formula = NA)
data_dd <- cbind(data_dd, fitted_het[,,1])
plot(data_dd$Estimate)
ggplot(data_dd, aes(x = real_prep_time, y = Estimate)) +
geom_ribbon(aes(ymin = `2.5%ile`, ymax = `97.5%ile`), alpha = 0.4) +
geom_line()
plot(data_heterologous$Est.Error)
plot(data_homologous$Est.Error)
update.packages()
Test = data.frame(x = c(5, 10, 15, 25), y = c(5, 8, 12, 16))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
a*(x**b)
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), trace = TRUE)
nls(y ~ a * x ^ b, data = Test, start = list(a = 1.613, b = .718), trace = TRUE)
nls
Test = data.frame(x = c(5, 10, 15, 25), y = c(5, 8, 12, 16))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
a*(x**b)
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), trace = TRUE)
fun
?`**`
debugonce(nls)
Test = data.frame(x = c(5, 10, 15, 25), y = c(5, 8, 12, 16))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
a*(x**b)
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), trace = TRUE)
algorithm
ctrl
trace
debugonce(nlsModel)
debugonce(stats:::nlsModel)
Test = data.frame(x = c(5, 10, 15, 25), y = c(5, 8, 12, 16))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
a*(x**b)
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), trace = TRUE)
eval
form[[3]]
rhs
getRHS()
nls:::getRHS
stats:::getRHS
stats:::getRHS()
?nls
Test = data.frame(x = c(5, 10, 15, 25), y = c(5, 8, 12, 16))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
a*(x**b)
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), trace = TRUE, control = nls.control(printEval=TRUE))
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
a*(x**b)
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), trace = TRUE, control = nls.control(printEval=TRUE))
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
a*(x**b)
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), control = nls.control(printEval=TRUE))
debugonce(stats:::nlsModel)
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
a*(x**b)
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), control = nls.control(printEval=TRUE))
rhs
eval(form[[3L]], envir = env)
str(form[[3L]])
env
str(env)
rhs
numericDeriv(form[[3L]], names(ind), env)
?numericDeriv
names(ind)
q
?nls
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
dev <- a*(x**b)
attr(dev, 'gradient') <- cbind(x ** b, a * (x ** b) * log(x))
dev
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), control = nls.control(printEval=TRUE))
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
dev <- a*(x**b)
dev
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), control = nls.control(printEval=TRUE))
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
dev <- a*(x**b)
attr(dev, 'gradient') <- cbind(x ** b, a * (x ** b) * log(x))
dev
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), control = nls.control(printEval=TRUE))
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
dev <- a*(x**b)
dev
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), control = nls.control(printEval=TRUE))
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
dev <- a*(x^b)
attr(dev, 'gradient') <- cbind(x^b, a * (x^b) * log(x))
dev
}
nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), control = nls.control(printEval=TRUE))
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
dev <- a*(x^b)
attr(dev, 'gradient') <- cbind(x^b, a * (x^b) * log(x))
dev
}
m1 <- nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), control = nls.control(printEval=TRUE))
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
dev <- a*(x^b)
dev
}
m2 <- nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), control = nls.control(printEval=TRUE))
all.equal(m1, m2)
m1
m2
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
dev <- a*(x^b)
dev
}
m2 <- nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), trace = TRUE)
?numericDeriv
debugonce(nls)
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
dev <- a*(x^b)
dev
}
m2 <- nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), trace = TRUE)
m
ctrl
trace
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
dev <- a*(x^b)
dev
}
m2 <- nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), trace = FALSE)
debugonce(nls)
Test = data.frame(x = c(5, 10, 15, 25, 88), y = c(5, 8, 12, 16, 42))
fun = function(x, a, b) {
cat("a =", a, ", b =", b, "\n")
dev <- a*(x^b)
dev
}
m2 <- nls(y ~ fun(x, a, b), data = Test, start = list(a = 1.613, b = 0.718), trace = FALSE)
nlsModel
library(data.table)
library(ggplot2)
library(brms)
theme_set(theme_minimal())
dat <-  fread('extended_table.csv') # comes from matlab file write_extended_data.m
dat <- dat[real_prep_time > 0]
dat <- dat[first_image != second_image]
dat <- dat[!is.nan(first_press)]
dat[, 'first_hand' := ifelse(first_image > 5, 'right', 'left')]
dat[, 'second_hand' := ifelse(second_image > 5, 'right', 'left')]
fings <- c('pinky', 'ring', 'middle', 'index', 'thumb')
fingers <- data.frame(first_image = 1:10, finger1 = c(fings, rev(fings)))
dat <- merge(dat, fingers, by = 'first_image', sort = FALSE)
names(fingers) <- c('second_image', 'finger2')
dat <- merge(dat, fingers, by = 'second_image', sort = FALSE)
dat[, 'label' := ifelse(first_hand == second_hand, 'same_hand',
ifelse(finger1 == finger2, 'homologous', 'heterologous'))]
head(dat)
dat <-  fread('extended_data.csv') # comes from matlab file write_extended_data.m
dat <- dat[real_prep_time > 0]
dat <- dat[first_image != second_image]
dat <- dat[!is.nan(first_press)]
dat[, 'first_hand' := ifelse(first_image > 5, 'right', 'left')]
dat[, 'second_hand' := ifelse(second_image > 5, 'right', 'left')]
fings <- c('pinky', 'ring', 'middle', 'index', 'thumb')
fingers <- data.frame(first_image = 1:10, finger1 = c(fings, rev(fings)))
dat <- merge(dat, fingers, by = 'first_image', sort = FALSE)
names(fingers) <- c('second_image', 'finger2')
dat <- merge(dat, fingers, by = 'second_image', sort = FALSE)
dat[, 'label' := ifelse(first_hand == second_hand, 'same_hand',
ifelse(finger1 == finger2, 'homologous', 'heterologous'))]
head(dat)
names(dat)[17:18] <- c('first_finger', 'second_finger')
ggplot(dat, aes(x = real_prep_time, y = max_force)) + geom_point()
ggplot(dat, aes(x = real_prep_time, y = max_force, colour = factor(correct))) + geom_point()
ggplot(dat, aes(x = real_prep_time, y = max_force, colour = factor(correct))) + geom_point() + facet_wrap(~correct)
ggplot(dat, aes(x = real_prep_time, y = max_force, colour = factor(correct))) + geom_density2d() + facet_wrap(~correct)
?geom_density2d
ggplot(dat, aes(x = real_prep_time, y = max_force)) + stat_density_2d(aes(fill = ..level..), geom = 'polygon') + facet_wrap(~correct)
ggplot(dat, aes(x = real_prep_time, y = max_force)) + stat_density_2d(aes(fill = ..level.., colour = factor(correct)), geom = 'polygon')
theme_set(theme_classic())
ggplot(dat, aes(x = real_prep_time, y = max_force)) + stat_density_2d(aes(fill = ..level.., colour = factor(correct)), geom = 'polygon')
dat$finger_distance <- dat$first_image - dat$second_image
ggplot(dat[finger_distance < 4 & first_hand == second_hand], aes(x = real_prep_time, y = correct, colour = factor(finger_distance)))
ggplot(dat[finger_distance < 4 && first_hand == second_hand], aes(x = real_prep_time, y = correct, colour = factor(finger_distance)))
ggplot(dat[irst_hand == second_hand], aes(x = real_prep_time, y = correct, colour = factor(finger_distance)))
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time, y = correct, colour = factor(finger_distance)))
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time, y = correct, colour = factor(finger_distance))) + geom_point()
dat$finger_distance <- abs(dat$finger_distance)
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time, y = correct, colour = factor(finger_distance))) + geom_point()
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time,  colour = factor(finger_distance))) + geom_histogram()
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time,  fill = factor(finger_distance))) + geom_histogram()
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time,  fill = factor(finger_distance))) + geom_density(alpha = 0.6)
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time,  fill = factor(finger_distance))) + geom_density(alpha = 0.6, aes(y = ..count..))
ggplot(dat, aes(x = max_force, colour = factor(first_press)) + geom_point()
)
ggplot(dat, aes(x = max_force, colour = factor(first_press))() + geom_point()
)
ggplot(dat, aes(x = max_force, colour = factor(first_press))) + geom_point()
ggplot(dat, aes(x = max_force, colour = factor(first_press))) + geom_density(alpha = 0.5)
ggplot(dat, aes(x = max_force, colour = fill(first_press))) + geom_density(alpha = 0.5)
ggplot(dat, aes(x = max_force, fill = (first_press))) + geom_density(alpha = 0.5)
ggplot(dat, aes(x = max_force, fill = factor(first_press))) + geom_density(alpha = 0.5)
head(dat)
dat[, 'hand_chosen' := ifelse(first_press > 5, 'right', 'left')]
names(fingers) <- c('first_press', 'finger_chosen')
dat <- merge(dat, fingers, by = 'first_press', sort = FALSE)
head(dat)
ggplot(dat, aes(x = max_force, fill = finger_chosen)) + geom_density(alpha = 0.6)
ggplot(dat, aes(x = max_force, fill = finger_chosen)) + geom_density(alpha = 0.6, aes(y = ..count..))
ggplot(dat, aes(x = correct, fill = finger_chosen)) + geom_density(alpha = 0.6, aes(y = ..count..))
ggplot(dat, aes(x = label, fill = finger_chosen)) + geom_density(alpha = 0.6, aes(y = ..count..))
ggplot(dat, aes(x = time_first_press, fill = finger_chosen)) + geom_density(alpha = 0.6, aes(y = ..count..))
ggplot(dat, aes(x = time_first_press, fill = finger_chosen)) + geom_density(alpha = 0.6, aes())
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time, y = correct, colour = factor(finger_distance))) + facet_wrap(~id)
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time, y = correct, colour = factor(finger_distance))) + facet_wrap(~id) + geom_smooth()
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time, y = correct, colour = factor(finger_distance), group = id))  + geom_smooth()
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time, colour = factor(finger_distance), group = id))  + geom_density(alpha = 0.6)
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time, fill = factor(finger_distance), group = id))  + geom_density(alpha = 0.6)
dat[first_hand == second_hand, .N, by = c('finger_distance')]
ggplot(dat, aes(x = real_prep_time, y = correct, colour = finger_chosen)) + geom_smooth()
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time,  fill = hand_chosen)) + geom_density(alpha = 0.6)
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time, y = correct, fill = hand_chosen)) + geom_density(alpha = 0.6)
ggplot(dat[first_hand == second_hand], aes(x = real_prep_time, y = correct, fill = hand_chosen)) + geom_smooth()
ggplot(dat, aes(x = real_prep_time, y = correct, fill = hand_chosen)) + geom_smooth()
ggplot(dat, aes(x = real_prep_time, y = correct, fill = hand_chosen)) + geom_smooth() + facet_wrap(~label)
ggplot(dat, aes(x = real_prep_time, y = correct, fill = hand_chosen)) + geom_smooth() + facet_wrap(id~label)
ggplot(dat, aes(x = real_prep_time, y = correct, fill = hand_chosen)) + geom_smooth() + facet_wrap(id~label, ncol = 3)
as.POSIXct("2017-10-01 02:30:00", "Australia/Sydney"); as.POSIXct("2017-10-01 02:30:00", format="%Y-%m-%d %H:%M:%S", "Australia/Sydney")
as.POSIXct("2017-10-01 02:30:00", "Australia/Sydney"); as.POSIXct("2017-10-01 02:30:00", format="%Y-%M-%D %H:%M:%S", "Australia/Sydney")
update.packages()
library(brms)
dat <- data.frame(y = c(rnorm(50), rnorm(50, 4)), x = rnorm(100))
fit <- brm(bf(y ~ 1, mu1 + mu2 ~ x),
data = dat,
family = mixture(gaussian(), gaussian()),
prior = c(prior(normal(0, 10), nlpar = mu1),
prior(normal(0, 10), nlpar = mu2)),
chains = 1
)
summary(fit)
plot(fit)
plot(fit)
pp_check(fit)
pp_check(fit, nsamples = 100)
data(sleepstudy, package = 'lme4')
head(sleepstudy)
fit$model
head(sleepstudy)
fit2 <- brm(bf(Reaction ~ 1, mu1 + mu2 ~ Days + (1|Subject)),
dat = sleepstudy, family = mixture(gaussian(), gaussian()),
prior = c(prior(normal(400, 10), nlpar = mu1),
prior(normal(600, 10), nlpar = mu2)),
chains = 1)
fit2
plot(fit)
plot(fit2)
pp_check(fit2)
library(data.table)
library(ggplot2)
dat <-  fread('extended_data.csv') # comes from matlab file write_extended_data.m
dat <- dat[real_prep_time > 0]
dat <- dat[first_image != second_image]
dat <- dat[!is.nan(first_press)]
dat[, 'first_hand' := ifelse(first_image > 5, 'right', 'left')]
dat[, 'second_hand' := ifelse(second_image > 5, 'right', 'left')]
fings <- c('pinky', 'ring', 'middle', 'index', 'thumb')
fingers <- data.frame(first_image = 1:10, finger1 = c(fings, rev(fings)))
dat <- merge(dat, fingers, by = 'first_image', sort = FALSE)
names(fingers) <- c('second_image', 'finger2')
dat <- merge(dat, fingers, by = 'second_image', sort = FALSE)
dat[, 'label' := ifelse(first_hand == second_hand, 'same_hand',
ifelse(finger1 == finger2, 'homologous', 'heterologous'))]
names(dat)[17:18] <- c('first_finger', 'second_finger')
dat[, 'hand_chosen' := ifelse(first_press > 5, 'right', 'left')]
names(fingers) <- c('first_press', 'finger_chosen')
dat <- merge(dat, fingers, by = 'first_press', sort = FALSE)
ggplot(dat, aes(x = real_prep_time, y = max_force, colour = factor(correct))) +
geom_point() +
facet_wrap(~id) +
labs(x = 'Preparation Time (s)',
y = 'Maximum Force (N)')
ggplot(dat, aes(x = real_prep_time, y = max_force, colour = factor(correct))) +
geom_point() +
facet_wrap(~id) +
labs(x = 'Preparation Time (s)',
y = 'Maximum Force (N)') + geom_smooth(se = FALSE)
ggplot(dat, aes(x = max_force, fill = factor(correct))) + geom_histogram()
?geom_histogram
ggplot(dat, aes(x = max_force, fill = factor(correct))) + geom_histogram(position = 'identity')
ggplot(dat, aes(x = max_force, fill = factor(correct))) + geom_histogram(position = 'identity', alpha = .5)
ggplot(dat, aes(x = real_prep_time, fill = finger_chosen)) +
geom_density(alpha = 0.4) +
facet_wrap(~correct)
ggplot(dat, aes(x = real_prep_time, fill = finger_chosen)) +
geom_density(alpha = 0.4) +
facet_wrap(id~correct, ncol = 2)
ggplot(dat, aes(x = real_prep_time, fill = finger_chosen)) +
geom_density(alpha = 0.4) +
facet_wrap(correct ~ label, ncol = 3)
ggplot(dat, aes(x = real_prep_time, fill = finger_chosen)) +
geom_histogram(position = 'identity', alpha = 0.4, bins = 40) +
facet_wrap(id ~ label,  ncol = 3)
ggplot(dat, aes(x = real_prep_time, fill = finger_chosen)) +
geom_density(alpha = 0.4) +
facet_wrap(id~correct, ncol = 2)
ggplot(dat, aes(x = real_prep_time, fill = finger_chosen)) +
geom_density(alpha = 0.4) +
facet_wrap(id~correct, ncol = 2) + geom_rug()
ggplot(dat, aes(x = real_prep_time, colour = finger_chosen,fill = finger_chosen)) +
geom_density(alpha = 0.4) +
facet_wrap(id~correct, ncol = 2) + geom_rug()
ggplot(dat, aes(x = real_prep_time, colour = finger_chosen,fill = finger_chosen)) +
geom_density(alpha = 0.4, aes(y = ..count..)) +
facet_wrap(id~correct, ncol = 2) + geom_rug()
ggplot(dat, aes(x = real_prep_time, colour = finger_chosen,fill = finger_chosen)) +
geom_density(alpha = 0.4, aes(y = ..count..)) +
facet_wrap(id~correct, ncol = 2) + geom_rug(size = )
ggplot(dat, aes(x = real_prep_time, colour = finger_chosen,fill = finger_chosen)) +
geom_density(alpha = 0.4, aes(y = ..count..)) +
facet_wrap(id~correct, ncol = 2) + geom_rug(size = 2)
library(flexmix)
install.packages('flexmix')
data(faithful)
head(faithful)
par(mfrow=c(1,2))
apply(faithful, 2, ggplot2:::qplot, geom='density')
layout(1)
y = rnorm(500, c(50,80), c(5,10))
ggplot2:::qplot(y, geom='density')
psych::describe(data.frame(y[seq(1,500, 2)], y[seq(2,500, 2)]))
# take your pick
standat = list(N=nrow(faithful), K=2, y=faithful$waiting)
stanmodelcode = '
data {
int<lower=1> K;                                                  # K components
int<lower=1> N;                                                  # N observations
real y[N];                                                       # variable of interest
}
parameters {
simplex[K] theta;                                                # mixing proportions
simplex[K] mu_prop;
real mu_loc;
real<lower=0> mu_scale;
real<lower=0> sigma[K];                                          # sds of the components
}
transformed parameters {
ordered[K] mu;
mu = mu_loc + mu_scale * cumulative_sum(mu_prop);               # means of the components
}
model {
// prior
mu_loc ~ cauchy(0,5);
mu_scale ~ cauchy(0,5);
sigma ~ cauchy(0,5);
// likelihood
{
real ps[K];
vector[K] log_theta;
log_theta = log(theta);
for (n in 1:N) {
for (k in 1:K) {
ps[k] = log_theta[k] + normal_lpdf(y[n] | mu[k], sigma[k]);
}
target += log_sum_exp(ps);
}
}
}
'
################
### Test Run ###
################
library(rstan)
# the following may take several minutes per chain depending on the data
test = stan(model_code = stanmodelcode, model_name = "example",
data = standat, iter = 7000, warmup=2000, chains = 2, cores=2,
verbose = F)
print(test, digits=3)
### compare to flexmix: coefs in flexmod1 = mu in test
library(flexmix)
flexmod1 = flexmix(standat$y~1, k=2, control=list(tolerance=1e-12, iter.max=1000))
summary(flexmod1)
parameters(flexmod1)
